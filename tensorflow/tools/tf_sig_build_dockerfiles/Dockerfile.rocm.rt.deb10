################################################################################
ARG DISTRO_IMG
#FROM ${DISTRO_IMG:-'compute-artifactory.amd.com:5000/rocm-base-images/debian-10:2025022301-6.4-47'} as runtime
#FROM ${DISTRO_IMG:-'compute-artifactory.amd.com:5000/rocm-base-images/debian-10:2025032101-6.5-15845'} as runtime
FROM ${DISTRO_IMG:-'compute-artifactory.amd.com:5000/rocm-base-images/debian-10:2025022301-6.4.1-60'} as runtime
################################################################################

# Note: Ubuntu Noble as Python 3.12 installed by default
#
# Install dependencies
COPY setup.packages.sh /setup.packages.sh
COPY runtime.packages.txt /runtime.packages.txt
RUN /setup.packages.sh /runtime.packages.txt

# Install ROCM
ARG TF_PKGS_DIR=tmp/my-packages
ARG TENSORFLOW_PACKAGE=tf_nightly_rocm
ARG ROCM_VERSION=6.4.0
ARG CUSTOM_INSTALL
ARG ROCM_PATH=/opt/rocm-${ROCM_VERSION}
ENV ROCM_PATH=${ROCM_PATH}
RUN mkdir /${TF_PKGS_DIR}
COPY ${TF_PKGS_DIR}/${TENSORFLOW_PACKAGE} /${TF_PKGS_DIR}/${TENSORFLOW_PACKAGE}
COPY setup.rocm.sh /setup.rocm.sh
COPY devel.packages.rocm.deb10.txt /devel.packages.rocm.deb10.txt
RUN /setup.rocm.sh $ROCM_VERSION buster

# All lines past this point are reset when $CACHEBUSTER is set. We need this
# for Python specifically because we install some nightly packages which are
# likely to change daily.
ARG CACHEBUSTER=0
RUN echo $CACHEBUSTER

# Setup ENV variables for tensorflow pip build
ENV TF_NEED_ROCM=1
ENV TF_ROCM_GCC=1
ENV ROCM_TOOLKIT_PATH=${ROCM_PATH}

# Setup Python environment. PYTHON_VERSION is e.g. "python3.8"
ARG PYTHON_VERSION
COPY setup.build-python_ubuntu.sh /setup.build-python_ubuntu.sh
COPY devel.requirements.txt /devel.requirements.txt
RUN /setup.build-python_ubuntu.sh $PYTHON_VERSION /devel.requirements.txt

ARG TF_PKG_LOC=http://ml-ci.amd.com:21096/job/tensorflow/job/release-build-whl/lastSuccessfulBuild/artifact/r2.18-rocm-enhanced/packages-${PYTHON_VERSION}/
RUN pip install --no-cache-dir /${TF_PKGS_DIR}/${TENSORFLOW_PACKAGE}
#RUN if [ -n "${TENSORFLOW_PACKAGE}" ]; then pip install --no-cache-dir /${TF_PKGS_DIR}/${TENSORFLOW_PACKAGE}; \
#    else \
#       CP_VERS=$( \
#          echo ${PYTHON_VERSION} | sed 's/\.//g' \
#       ) \
#       && echo $CP_VERS \
#       && TF_PKG=$( \
#          echo "tensorflow_rocm-2.18.0.620-cp${CP_VERS}-cp${CP_VERS}-manylinux_2_28_x86_64.whl" \
#       ) \
#       && echo $TF_PKG \
#       && wget ${TF_PKG_LOC}/${TF_PKG} \
#       && pip install --no-cache-dir ${TF_PKG} \
#    fi \
RUN echo 'ALL ALL=NOPASSWD:ALL' | tee /etc/sudoers.d/sudo-nopasswd

ARG TF_TESTING_FL
ENV TF_TESTING_FL=${TF_TESTING_FL}
ARG DWLD_TF_SRC_CMD
RUN if [ -n "${DWLD_TF_SRC_CMD}" ]; then eval "${DWLD_TF_SRC_CMD}"; fi
RUN wget https://github.com/bazelbuild/bazelisk/releases/download/v1.11.0/bazelisk-linux-amd64 -O /usr/local/bin/bazel && \
    chmod +x /usr/local/bin/bazel
RUN git clone https://github.com/tensorflow/models.git
RUN git clone https://github.com/tensorflow/examples.git
RUN git clone https://github.com/tensorflow/autograph.git
RUN git clone https://github.com/tensorflow/benchmarks.git
